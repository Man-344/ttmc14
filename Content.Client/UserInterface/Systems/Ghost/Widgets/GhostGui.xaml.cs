using Content.Client.Stylesheets;
using Content.Client.UserInterface.Systems.Ghost.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Systems.Ghost.Widgets;

[GenerateTypedNameReferences]
public sealed partial class GhostGui : UIWidget
{
    public GhostTargetWindow TargetWindow { get; }

    public event Action? RequestWarpsPressed;
    public event Action? ReturnToBodyPressed;
    public event Action? GhostRolesPressed;
    public event Action? RespawnToLobbyPressed;
    private int _prevNumberRoles;

    private DateTime? _deathTime;
    private TimeSpan _respawnCooldown = TimeSpan.FromMinutes(2);

    public GhostGui()
    {
        RobustXamlLoader.Load(this);

    _deathTime = DateTime.UtcNow;
    UpdateRespawnButton();

        TargetWindow = new GhostTargetWindow();

        MouseFilter = MouseFilterMode.Ignore;

        GhostWarpButton.OnPressed += _ => RequestWarpsPressed?.Invoke();
        ReturnToBodyButton.OnPressed += _ => ReturnToBodyPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesPressed?.Invoke();
        GhostRolesButton.OnPressed += _ => GhostRolesButton.StyleClasses.Remove(StyleBase.ButtonCaution);
        RespawnLobbyButton.OnPressed += _ => OnRespawnLobbyPressed();
    }

    private void OnRespawnLobbyPressed()
    {
        // Если времени смерти нет — всё равно отправляем запрос на сервер.
        if (_deathTime != null)
        {
            var timeSinceDeath = DateTime.UtcNow - _deathTime.Value;
            if (timeSinceDeath < _respawnCooldown)
            {
                var wait = _respawnCooldown - timeSinceDeath;
                var msg = Loc.GetString("ghost-gui-respawn-lobby-wait", ("time", wait.Minutes > 0 ? $"{wait.Minutes}м {wait.Seconds}с" : $"{wait.Seconds}с"));
                RespawnLobbyButton.ModulateSelfOverride = new(1, 0.3f, 0.3f, 1);
                RespawnLobbyButton.ToolTip = msg;
                // Всё равно шлём запрос на сервер — сервер ответит popup'ом о том, что откат ещё не прошёл.
            }
        }

        RespawnToLobbyPressed?.Invoke();

    // Сбрасываем локальный таймер на клиенте — пользователь нажал респавн, отображение отката убираем.
    _deathTime = null;
    RespawnLobbyButton.ToolTip = null;
    RespawnLobbyButton.ModulateSelfOverride = null;
    UpdateRespawnButton();
    }

    public void Hide()
    {
        TargetWindow.Close();
        Visible = false;
    }

    public void Update(int? roles, bool? canReturnToBody, DateTime? deathTime = null)
    {
        ReturnToBodyButton.Disabled = !canReturnToBody ?? true;
        // Не затираем локальный _deathTime, если пришёл null — это сохраняет клиентский таймер,
        // и он будет перезаписан реальным серверным временем при его наличии.
        if (deathTime != null)
            _deathTime = deathTime;

    UpdateRespawnButton();

        if (roles != null)
        {
            GhostRolesButton.Text = Loc.GetString("ghost-gui-ghost-roles-button", ("count", roles));

            if (roles > _prevNumberRoles)
            {
                GhostRolesButton.StyleClasses.Add(StyleBase.ButtonCaution);
            }

            _prevNumberRoles = (int)roles;
        }

        TargetWindow.Populate();
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        // Обновляем состояние кнопки респавна каждый кадр (если есть deathTime)
        UpdateRespawnButton();
    }

    private void UpdateRespawnButton()
    {
        if (_deathTime == null)
        {
            // Если нет информации о времени смерти, оставляем кнопку активной и показываем заглушку времени.
            RespawnLobbyButton.Disabled = false;
            RespawnLobbyButton.ToolTip = null;
            RespawnLobbyButton.ModulateSelfOverride = null;
            RespawnLobbyButton.Text = Loc.GetString("ghost-gui-respawn-lobby-button", ("time", "--"));
            return;
        }

        var timeSinceDeath = DateTime.UtcNow - _deathTime.Value;
        var cooling = timeSinceDeath < _respawnCooldown;

        // Кнопка всегда остаётся активной — иначе on-pressed не срабатывает и не показывает сообщения.
        RespawnLobbyButton.Disabled = false;

        if (cooling)
        {
            var wait = _respawnCooldown - timeSinceDeath;
            RespawnLobbyButton.ToolTip = Loc.GetString("ghost-gui-respawn-lobby-wait", ("time", wait.Minutes > 0 ? $"{wait.Minutes}м {wait.Seconds}с" : $"{wait.Seconds}с"));

            var timeSeconds = wait.TotalSeconds;
            var timeStr = timeSeconds >= 60 ?
                $"{(int)wait.TotalMinutes}m {wait.Seconds + (wait.Milliseconds / 1000.0):00.0}s"
                :
                $"{timeSeconds:F1}";

            // Используем основной ключ локализации, как вы просили — он получает параметр { $time }.
            RespawnLobbyButton.Text = Loc.GetString("ghost-gui-respawn-lobby-button", ("time", timeStr));
            RespawnLobbyButton.ModulateSelfOverride = new(1, 0.3f, 0.3f, 1);
        }
        else
        {
            // Когда откат закончился — показываем основной ключ с нулевой заменой времени.
            RespawnLobbyButton.ToolTip = null;
            RespawnLobbyButton.ModulateSelfOverride = null;
            RespawnLobbyButton.Text = Loc.GetString("ghost-gui-respawn-lobby-button", ("time", "0"));
        }
    }

    protected override void Dispose(bool disposing)
    {
        base.Dispose(disposing);

        if (disposing)
        {
            TargetWindow.Dispose();
        }
    }
}
